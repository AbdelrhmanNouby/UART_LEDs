
UART_LEDs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000072e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  0000072e  000007c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000b4  008000b4  00000816  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e3  00000000  00000000  000009e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099f  00000000  00000000  00001cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f23  00000000  00000000  00002666  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  0000358c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000059a  00000000  00000000  00003824  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e32  00000000  00000000  00003dbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004bf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 eb       	ldi	r26, 0xB4	; 180
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 3b       	cpi	r26, 0xBB	; 187
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 95 03 	jmp	0x72a	; 0x72a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
LED_t led1 = {PORTB,PIN4};					// Green LED configuration 
LED_t led2 = {PORTB,PIN6};					// Red LED configuration
LED_t led3 = {PORTB,PIN5};					// Yellow LED configuration
	
int main (void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	c3 51       	subi	r28, 0x13	; 19
  9c:	d1 40       	sbci	r29, 0x01	; 1
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
	UART_u8Init();						// initialize UART comm
  a8:	0e 94 26 03 	call	0x64c	; 0x64c <UART_u8Init>
	TIMER0_u8Init();					// initialize TIMER0 to  use delay 
  ac:	0e 94 ba 02 	call	0x574	; 0x574 <TIMER0_u8Init>
	LED_u8Init(led1);					// initialize Green LED
  b0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led1>
  b4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <led1+0x1>
  b8:	0e 94 1b 01 	call	0x236	; 0x236 <LED_u8Init>
	LED_u8Init(led2);					// initialize Red LED
  bc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led2>
  c0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led2+0x1>
  c4:	0e 94 1b 01 	call	0x236	; 0x236 <LED_u8Init>
	LED_u8Init(led3);					// initialize Yellow LED
  c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  cc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d0:	0e 94 1b 01 	call	0x236	; 0x236 <LED_u8Init>
	uint8_t R_Str [256] ;						// array to contain Received string 
	uint8_t WAIT_Str [] = {"WAIT"}  ;			// wait string
  d4:	85 e0       	ldi	r24, 0x05	; 5
  d6:	e4 ea       	ldi	r30, 0xA4	; 164
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	de 01       	movw	r26, r28
  dc:	af 5f       	subi	r26, 0xFF	; 255
  de:	be 4f       	sbci	r27, 0xFE	; 254
  e0:	01 90       	ld	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	8a 95       	dec	r24
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0x4e>
	uint8_t AT_Str [] = {"AT"}  ;				// AT string
  e8:	81 e4       	ldi	r24, 0x41	; 65
  ea:	94 e5       	ldi	r25, 0x54	; 84
  ec:	ca 5f       	subi	r28, 0xFA	; 250
  ee:	de 4f       	sbci	r29, 0xFE	; 254
  f0:	99 83       	std	Y+1, r25	; 0x01
  f2:	88 83       	st	Y, r24
  f4:	c6 50       	subi	r28, 0x06	; 6
  f6:	d1 40       	sbci	r29, 0x01	; 1
  f8:	c8 5f       	subi	r28, 0xF8	; 248
  fa:	de 4f       	sbci	r29, 0xFE	; 254
  fc:	18 82       	st	Y, r1
  fe:	c8 50       	subi	r28, 0x08	; 8
 100:	d1 40       	sbci	r29, 0x01	; 1
	uint8_t START_Str [] = {"START"}  ;			// start string
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	e9 ea       	ldi	r30, 0xA9	; 169
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	de 01       	movw	r26, r28
 10a:	a7 5f       	subi	r26, 0xF7	; 247
 10c:	be 4f       	sbci	r27, 0xFE	; 254
 10e:	01 90       	ld	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x7c>
	uint8_t STOP_Str [] = {"STOP"}  ;			// stop string 
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	ef ea       	ldi	r30, 0xAF	; 175
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	de 01       	movw	r26, r28
 11e:	a1 5f       	subi	r26, 0xF1	; 241
 120:	be 4f       	sbci	r27, 0xFE	; 254
 122:	01 90       	ld	r0, Z+
 124:	0d 92       	st	X+, r0
 126:	8a 95       	dec	r24
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x90>
	
	while(1)
	{
		UART_u8ReceiveString(R_Str);					// receive string from terminal 
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	0e 94 72 03 	call	0x6e4	; 0x6e4 <UART_u8ReceiveString>
		if ( Compare_Str (R_Str,START_Str))				
 132:	be 01       	movw	r22, r28
 134:	67 5f       	subi	r22, 0xF7	; 247
 136:	7e 4f       	sbci	r23, 0xFE	; 254
 138:	ce 01       	movw	r24, r28
 13a:	01 96       	adiw	r24, 0x01	; 1
 13c:	0e 94 33 01 	call	0x266	; 0x266 <Compare_Str>
 140:	88 23       	and	r24, r24
 142:	d1 f0       	breq	.+52     	; 0x178 <main+0xe6>
		{
			LED_u8On(led1);
 144:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led1>
 148:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <led1+0x1>
 14c:	0e 94 23 01 	call	0x246	; 0x246 <LED_u8On>
			LED_u8Off(led2);
 150:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led2>
 154:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led2+0x1>
 158:	0e 94 2b 01 	call	0x256	; 0x256 <LED_u8Off>
			LED_u8Off(led3);
 15c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 160:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 164:	0e 94 2b 01 	call	0x256	; 0x256 <LED_u8Off>
			UART_u8SendString("Green LED is on");
 168:	86 e6       	ldi	r24, 0x66	; 102
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 5f 03 	call	0x6be	; 0x6be <UART_u8SendString>
			UART_u8SendByte(NEWLINE);
 170:	8d e0       	ldi	r24, 0x0D	; 13
 172:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_u8SendByte>
 176:	d9 cf       	rjmp	.-78     	; 0x12a <main+0x98>
		}
		else if ( Compare_Str (R_Str,STOP_Str))
 178:	be 01       	movw	r22, r28
 17a:	61 5f       	subi	r22, 0xF1	; 241
 17c:	7e 4f       	sbci	r23, 0xFE	; 254
 17e:	ce 01       	movw	r24, r28
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	0e 94 33 01 	call	0x266	; 0x266 <Compare_Str>
 186:	88 23       	and	r24, r24
 188:	d1 f0       	breq	.+52     	; 0x1be <main+0x12c>
		{
			LED_u8Off(led1);
 18a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led1>
 18e:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <led1+0x1>
 192:	0e 94 2b 01 	call	0x256	; 0x256 <LED_u8Off>
			LED_u8On(led2);
 196:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led2>
 19a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led2+0x1>
 19e:	0e 94 23 01 	call	0x246	; 0x246 <LED_u8On>
			LED_u8Off(led3);
 1a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1aa:	0e 94 2b 01 	call	0x256	; 0x256 <LED_u8Off>
			UART_u8SendString("Red LED is on");
 1ae:	86 e7       	ldi	r24, 0x76	; 118
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 5f 03 	call	0x6be	; 0x6be <UART_u8SendString>
			UART_u8SendByte(NEWLINE);
 1b6:	8d e0       	ldi	r24, 0x0D	; 13
 1b8:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_u8SendByte>
 1bc:	b6 cf       	rjmp	.-148    	; 0x12a <main+0x98>
		}
		else if ( Compare_Str (R_Str,WAIT_Str))
 1be:	be 01       	movw	r22, r28
 1c0:	6f 5f       	subi	r22, 0xFF	; 255
 1c2:	7e 4f       	sbci	r23, 0xFE	; 254
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	0e 94 33 01 	call	0x266	; 0x266 <Compare_Str>
 1cc:	88 23       	and	r24, r24
 1ce:	d1 f0       	breq	.+52     	; 0x204 <main+0x172>
		{
			LED_u8Off(led1);
 1d0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <led1>
 1d4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <led1+0x1>
 1d8:	0e 94 2b 01 	call	0x256	; 0x256 <LED_u8Off>
			LED_u8Off(led2);
 1dc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <led2>
 1e0:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <led2+0x1>
 1e4:	0e 94 2b 01 	call	0x256	; 0x256 <LED_u8Off>
			LED_u8On(led3);
 1e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ec:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1f0:	0e 94 23 01 	call	0x246	; 0x246 <LED_u8On>
			UART_u8SendString("Yellow LED is on");
 1f4:	84 e8       	ldi	r24, 0x84	; 132
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 5f 03 	call	0x6be	; 0x6be <UART_u8SendString>
			UART_u8SendByte(NEWLINE);
 1fc:	8d e0       	ldi	r24, 0x0D	; 13
 1fe:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_u8SendByte>
 202:	93 cf       	rjmp	.-218    	; 0x12a <main+0x98>
		}
		else if ( Compare_Str (R_Str,AT_Str))
 204:	be 01       	movw	r22, r28
 206:	6a 5f       	subi	r22, 0xFA	; 250
 208:	7e 4f       	sbci	r23, 0xFE	; 254
 20a:	ce 01       	movw	r24, r28
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	0e 94 33 01 	call	0x266	; 0x266 <Compare_Str>
 212:	88 23       	and	r24, r24
 214:	41 f0       	breq	.+16     	; 0x226 <main+0x194>
		{
			UART_u8SendString("OK");
 216:	85 e9       	ldi	r24, 0x95	; 149
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 5f 03 	call	0x6be	; 0x6be <UART_u8SendString>
			UART_u8SendByte(NEWLINE);
 21e:	8d e0       	ldi	r24, 0x0D	; 13
 220:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_u8SendByte>
 224:	82 cf       	rjmp	.-252    	; 0x12a <main+0x98>
		}
		else
		{
			UART_u8SendString("Wrong Input");
 226:	88 e9       	ldi	r24, 0x98	; 152
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 5f 03 	call	0x6be	; 0x6be <UART_u8SendString>
			UART_u8SendByte(NEWLINE);
 22e:	8d e0       	ldi	r24, 0x0D	; 13
 230:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_u8SendByte>
 234:	7a cf       	rjmp	.-268    	; 0x12a <main+0x98>

00000236 <LED_u8Init>:
// function to initialize LED 
uint8_t LED_u8Init ( LED_t led )
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// set direction of LED's pin
	u8ErrorState = DIO_u8SetPinDirection(led.port,led.pin,OUTPUTPIN);
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	69 2f       	mov	r22, r25
 23a:	0e 94 4a 01 	call	0x294	; 0x294 <DIO_u8SetPinDirection>
	// error Checking 
	if ( u8ErrorState == SetPinData_Error )
 23e:	84 31       	cpi	r24, 0x14	; 20
 240:	09 f4       	brne	.+2      	; 0x244 <LED_u8Init+0xe>
		u8ErrorState = LED_Init_Error ;
 242:	81 e3       	ldi	r24, 0x31	; 49
		
	return u8ErrorState ;	
}
 244:	08 95       	ret

00000246 <LED_u8On>:
// function to turn LED on 
uint8_t LED_u8On ( LED_t led )
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// set LES's pin state to HIGH
	u8ErrorState = DIO_u8SetPinData(led.port,led.pin,HIGH);
 246:	41 e0       	ldi	r20, 0x01	; 1
 248:	69 2f       	mov	r22, r25
 24a:	0e 94 40 02 	call	0x480	; 0x480 <DIO_u8SetPinData>
	// error Checking 
	if ( u8ErrorState == SetPinData_Error )
 24e:	84 31       	cpi	r24, 0x14	; 20
 250:	09 f4       	brne	.+2      	; 0x254 <LED_u8On+0xe>
		u8ErrorState = LED_On_Error ;
 252:	82 e3       	ldi	r24, 0x32	; 50
		
	return u8ErrorState ;
}
 254:	08 95       	ret

00000256 <LED_u8Off>:
// function to turn LED off
uint8_t LED_u8Off ( LED_t led )
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// set LES's pin state to LOW 
	u8ErrorState = DIO_u8SetPinData(led.port,led.pin,LOW);
 256:	40 e0       	ldi	r20, 0x00	; 0
 258:	69 2f       	mov	r22, r25
 25a:	0e 94 40 02 	call	0x480	; 0x480 <DIO_u8SetPinData>
	// error Checking 
	if ( u8ErrorState == SetPinData_Error )
 25e:	84 31       	cpi	r24, 0x14	; 20
 260:	09 f4       	brne	.+2      	; 0x264 <LED_u8Off+0xe>
		u8ErrorState = LED_Off_Error ;
 262:	83 e3       	ldi	r24, 0x33	; 51
		
	return u8ErrorState ;
}
 264:	08 95       	ret

00000266 <Compare_Str>:
 */

#include "STRING.h"

uint8_t Compare_Str (uint8_t * str1,uint8_t * str2)
{
 266:	dc 01       	movw	r26, r24
 268:	fb 01       	movw	r30, r22
	while ( *str1 == *str2 )
 26a:	06 c0       	rjmp	.+12     	; 0x278 <Compare_Str+0x12>
	{
		if (( *str1 == '\0' ) || ( *str2 == '\0' ))
 26c:	99 23       	and	r25, r25
 26e:	41 f0       	breq	.+16     	; 0x280 <Compare_Str+0x1a>
 270:	22 23       	and	r18, r18
 272:	31 f0       	breq	.+12     	; 0x280 <Compare_Str+0x1a>
		break ;
		str1++ ;
 274:	11 96       	adiw	r26, 0x01	; 1
		str2++ ;
 276:	31 96       	adiw	r30, 0x01	; 1

#include "STRING.h"

uint8_t Compare_Str (uint8_t * str1,uint8_t * str2)
{
	while ( *str1 == *str2 )
 278:	9c 91       	ld	r25, X
 27a:	20 81       	ld	r18, Z
 27c:	92 17       	cp	r25, r18
 27e:	b1 f3       	breq	.-20     	; 0x26c <Compare_Str+0x6>
		if (( *str1 == '\0' ) || ( *str2 == '\0' ))
		break ;
		str1++ ;
		str2++ ;
	}
	if (( *str1 == '\0' ) && ( *str2 == '\0' ))
 280:	91 11       	cpse	r25, r1
 282:	04 c0       	rjmp	.+8      	; 0x28c <Compare_Str+0x26>
 284:	22 23       	and	r18, r18
 286:	21 f0       	breq	.+8      	; 0x290 <Compare_Str+0x2a>
	return 1 ;
	else
	return 0 ;
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	08 95       	ret
		break ;
		str1++ ;
		str2++ ;
	}
	if (( *str1 == '\0' ) && ( *str2 == '\0' ))
	return 1 ;
 290:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 0 ;
}
 292:	08 95       	ret

00000294 <DIO_u8SetPinDirection>:
	
		default:
		u8ErrorState = SetPortData_Error ;
	}
	return u8ErrorState ;
}
 294:	68 30       	cpi	r22, 0x08	; 8
 296:	08 f0       	brcs	.+2      	; 0x29a <DIO_u8SetPinDirection+0x6>
 298:	e7 c0       	rjmp	.+462    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	09 f4       	brne	.+2      	; 0x2a0 <DIO_u8SetPinDirection+0xc>
 29e:	3f c0       	rjmp	.+126    	; 0x31e <DIO_u8SetPinDirection+0x8a>
 2a0:	38 f0       	brcs	.+14     	; 0x2b0 <DIO_u8SetPinDirection+0x1c>
 2a2:	82 30       	cpi	r24, 0x02	; 2
 2a4:	09 f4       	brne	.+2      	; 0x2a8 <DIO_u8SetPinDirection+0x14>
 2a6:	72 c0       	rjmp	.+228    	; 0x38c <DIO_u8SetPinDirection+0xf8>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	09 f4       	brne	.+2      	; 0x2ae <DIO_u8SetPinDirection+0x1a>
 2ac:	a6 c0       	rjmp	.+332    	; 0x3fa <DIO_u8SetPinDirection+0x166>
 2ae:	de c0       	rjmp	.+444    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	49 f1       	breq	.+82     	; 0x306 <DIO_u8SetPinDirection+0x72>
 2b4:	18 f0       	brcs	.+6      	; 0x2bc <DIO_u8SetPinDirection+0x28>
 2b6:	42 30       	cpi	r20, 0x02	; 2
 2b8:	91 f0       	breq	.+36     	; 0x2de <DIO_u8SetPinDirection+0x4a>
 2ba:	da c0       	rjmp	.+436    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 2bc:	2a b3       	in	r18, 0x1a	; 26
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8SetPinDirection+0x34>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8SetPinDirection+0x30>
 2cc:	80 95       	com	r24
 2ce:	92 2f       	mov	r25, r18
 2d0:	98 23       	and	r25, r24
 2d2:	9a bb       	out	0x1a, r25	; 26
 2d4:	9b b3       	in	r25, 0x1b	; 27
 2d6:	89 23       	and	r24, r25
 2d8:	8b bb       	out	0x1b, r24	; 27
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret
 2de:	80 b7       	in	r24, 0x30	; 48
 2e0:	8b 7f       	andi	r24, 0xFB	; 251
 2e2:	80 bf       	out	0x30, r24	; 48
 2e4:	2a b3       	in	r18, 0x1a	; 26
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_u8SetPinDirection+0x5c>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_u8SetPinDirection+0x58>
 2f4:	98 2f       	mov	r25, r24
 2f6:	90 95       	com	r25
 2f8:	92 23       	and	r25, r18
 2fa:	9a bb       	out	0x1a, r25	; 26
 2fc:	9b b3       	in	r25, 0x1b	; 27
 2fe:	89 2b       	or	r24, r25
 300:	8b bb       	out	0x1b, r24	; 27
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	08 95       	ret
 306:	2a b3       	in	r18, 0x1a	; 26
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_u8SetPinDirection+0x7e>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_u8SetPinDirection+0x7a>
 316:	82 2b       	or	r24, r18
 318:	8a bb       	out	0x1a, r24	; 26
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	08 95       	ret
 31e:	41 30       	cpi	r20, 0x01	; 1
 320:	49 f1       	breq	.+82     	; 0x374 <DIO_u8SetPinDirection+0xe0>
 322:	18 f0       	brcs	.+6      	; 0x32a <DIO_u8SetPinDirection+0x96>
 324:	42 30       	cpi	r20, 0x02	; 2
 326:	91 f0       	breq	.+36     	; 0x34c <DIO_u8SetPinDirection+0xb8>
 328:	a5 c0       	rjmp	.+330    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 32a:	27 b3       	in	r18, 0x17	; 23
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_u8SetPinDirection+0xa2>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_u8SetPinDirection+0x9e>
 33a:	80 95       	com	r24
 33c:	92 2f       	mov	r25, r18
 33e:	98 23       	and	r25, r24
 340:	97 bb       	out	0x17, r25	; 23
 342:	98 b3       	in	r25, 0x18	; 24
 344:	89 23       	and	r24, r25
 346:	88 bb       	out	0x18, r24	; 24
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
 34c:	80 b7       	in	r24, 0x30	; 48
 34e:	8b 7f       	andi	r24, 0xFB	; 251
 350:	80 bf       	out	0x30, r24	; 48
 352:	27 b3       	in	r18, 0x17	; 23
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_u8SetPinDirection+0xca>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	6a 95       	dec	r22
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_u8SetPinDirection+0xc6>
 362:	98 2f       	mov	r25, r24
 364:	90 95       	com	r25
 366:	92 23       	and	r25, r18
 368:	97 bb       	out	0x17, r25	; 23
 36a:	98 b3       	in	r25, 0x18	; 24
 36c:	89 2b       	or	r24, r25
 36e:	88 bb       	out	0x18, r24	; 24
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret
 374:	27 b3       	in	r18, 0x17	; 23
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_u8SetPinDirection+0xec>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_u8SetPinDirection+0xe8>
 384:	82 2b       	or	r24, r18
 386:	87 bb       	out	0x17, r24	; 23
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	08 95       	ret
 38c:	41 30       	cpi	r20, 0x01	; 1
 38e:	49 f1       	breq	.+82     	; 0x3e2 <DIO_u8SetPinDirection+0x14e>
 390:	18 f0       	brcs	.+6      	; 0x398 <DIO_u8SetPinDirection+0x104>
 392:	42 30       	cpi	r20, 0x02	; 2
 394:	91 f0       	breq	.+36     	; 0x3ba <DIO_u8SetPinDirection+0x126>
 396:	70 c0       	rjmp	.+224    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 398:	24 b3       	in	r18, 0x14	; 20
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <DIO_u8SetPinDirection+0x110>
 3a0:	88 0f       	add	r24, r24
 3a2:	99 1f       	adc	r25, r25
 3a4:	6a 95       	dec	r22
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <DIO_u8SetPinDirection+0x10c>
 3a8:	80 95       	com	r24
 3aa:	92 2f       	mov	r25, r18
 3ac:	98 23       	and	r25, r24
 3ae:	94 bb       	out	0x14, r25	; 20
 3b0:	95 b3       	in	r25, 0x15	; 21
 3b2:	89 23       	and	r24, r25
 3b4:	85 bb       	out	0x15, r24	; 21
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	08 95       	ret
 3ba:	80 b7       	in	r24, 0x30	; 48
 3bc:	8b 7f       	andi	r24, 0xFB	; 251
 3be:	80 bf       	out	0x30, r24	; 48
 3c0:	24 b3       	in	r18, 0x14	; 20
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_u8SetPinDirection+0x138>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_u8SetPinDirection+0x134>
 3d0:	98 2f       	mov	r25, r24
 3d2:	90 95       	com	r25
 3d4:	92 23       	and	r25, r18
 3d6:	94 bb       	out	0x14, r25	; 20
 3d8:	95 b3       	in	r25, 0x15	; 21
 3da:	89 2b       	or	r24, r25
 3dc:	85 bb       	out	0x15, r24	; 21
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	08 95       	ret
 3e2:	24 b3       	in	r18, 0x14	; 20
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <DIO_u8SetPinDirection+0x15a>
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	6a 95       	dec	r22
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <DIO_u8SetPinDirection+0x156>
 3f2:	82 2b       	or	r24, r18
 3f4:	84 bb       	out	0x14, r24	; 20
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	08 95       	ret
 3fa:	41 30       	cpi	r20, 0x01	; 1
 3fc:	49 f1       	breq	.+82     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3fe:	18 f0       	brcs	.+6      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 400:	42 30       	cpi	r20, 0x02	; 2
 402:	91 f0       	breq	.+36     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 404:	3b c0       	rjmp	.+118    	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 406:	21 b3       	in	r18, 0x11	; 17
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	80 95       	com	r24
 418:	92 2f       	mov	r25, r18
 41a:	98 23       	and	r25, r24
 41c:	91 bb       	out	0x11, r25	; 17
 41e:	9b b3       	in	r25, 0x1b	; 27
 420:	89 23       	and	r24, r25
 422:	8b bb       	out	0x1b, r24	; 27
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	08 95       	ret
 428:	80 b7       	in	r24, 0x30	; 48
 42a:	8b 7f       	andi	r24, 0xFB	; 251
 42c:	80 bf       	out	0x30, r24	; 48
 42e:	21 b3       	in	r18, 0x11	; 17
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	98 2f       	mov	r25, r24
 440:	90 95       	com	r25
 442:	92 23       	and	r25, r18
 444:	91 bb       	out	0x11, r25	; 17
 446:	92 b3       	in	r25, 0x12	; 18
 448:	89 2b       	or	r24, r25
 44a:	82 bb       	out	0x12, r24	; 18
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	08 95       	ret
 450:	21 b3       	in	r18, 0x11	; 17
 452:	81 e0       	ldi	r24, 0x01	; 1
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	02 c0       	rjmp	.+4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	6a 95       	dec	r22
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	82 2b       	or	r24, r18
 462:	81 bb       	out	0x11, r24	; 17
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	08 95       	ret
 468:	82 e1       	ldi	r24, 0x12	; 18
 46a:	08 95       	ret
 46c:	82 e1       	ldi	r24, 0x12	; 18
 46e:	08 95       	ret
 470:	82 e1       	ldi	r24, 0x12	; 18
 472:	08 95       	ret
 474:	82 e1       	ldi	r24, 0x12	; 18
 476:	08 95       	ret
 478:	82 e1       	ldi	r24, 0x12	; 18
 47a:	08 95       	ret
 47c:	82 e1       	ldi	r24, 0x12	; 18
 47e:	08 95       	ret

00000480 <DIO_u8SetPinData>:
// function to assign value to pin
uint8_t DIO_u8SetPinData(uint8_t port, uint8_t pin, uint8_t data)
{
  uint8_t u8ErrorState = STD_TYPES_OK ;
  // check if true pin number passed to the function 
  if ( pin <= PORT_PINS )
 480:	68 30       	cpi	r22, 0x08	; 8
 482:	08 f0       	brcs	.+2      	; 0x486 <DIO_u8SetPinData+0x6>
 484:	6b c0       	rjmp	.+214    	; 0x55c <DIO_u8SetPinData+0xdc>
  {
	switch(port)
 486:	81 30       	cpi	r24, 0x01	; 1
 488:	01 f1       	breq	.+64     	; 0x4ca <DIO_u8SetPinData+0x4a>
 48a:	30 f0       	brcs	.+12     	; 0x498 <DIO_u8SetPinData+0x18>
 48c:	82 30       	cpi	r24, 0x02	; 2
 48e:	b1 f1       	breq	.+108    	; 0x4fc <DIO_u8SetPinData+0x7c>
 490:	83 30       	cpi	r24, 0x03	; 3
 492:	09 f4       	brne	.+2      	; 0x496 <DIO_u8SetPinData+0x16>
 494:	4b c0       	rjmp	.+150    	; 0x52c <DIO_u8SetPinData+0xac>
 496:	64 c0       	rjmp	.+200    	; 0x560 <DIO_u8SetPinData+0xe0>
	{
		// check which port and assign value to pin in this port 
		case PORTA:
			if((data == LOW)||(data == HIGH))
 498:	42 30       	cpi	r20, 0x02	; 2
 49a:	08 f0       	brcs	.+2      	; 0x49e <DIO_u8SetPinData+0x1e>
 49c:	63 c0       	rjmp	.+198    	; 0x564 <DIO_u8SetPinData+0xe4>
				ASSIGN_BIT(PORTA_REG,pin,data);
 49e:	5b b3       	in	r21, 0x1b	; 27
 4a0:	21 e0       	ldi	r18, 0x01	; 1
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	06 2e       	mov	r0, r22
 4a6:	02 c0       	rjmp	.+4      	; 0x4ac <DIO_u8SetPinData+0x2c>
 4a8:	22 0f       	add	r18, r18
 4aa:	33 1f       	adc	r19, r19
 4ac:	0a 94       	dec	r0
 4ae:	e2 f7       	brpl	.-8      	; 0x4a8 <DIO_u8SetPinData+0x28>
 4b0:	84 2f       	mov	r24, r20
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <DIO_u8SetPinData+0x3a>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <DIO_u8SetPinData+0x36>
 4be:	20 95       	com	r18
 4c0:	25 23       	and	r18, r21
 4c2:	82 2b       	or	r24, r18
 4c4:	8b bb       	out	0x1b, r24	; 27
}

// function to assign value to pin
uint8_t DIO_u8SetPinData(uint8_t port, uint8_t pin, uint8_t data)
{
  uint8_t u8ErrorState = STD_TYPES_OK ;
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	08 95       	ret
			else
				u8ErrorState = SetPinData_Error ;	
			break;	
		
		case PORTB:
			if((data == LOW)||(data == HIGH))
 4ca:	42 30       	cpi	r20, 0x02	; 2
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <DIO_u8SetPinData+0x50>
 4ce:	4c c0       	rjmp	.+152    	; 0x568 <DIO_u8SetPinData+0xe8>
				ASSIGN_BIT(PORTB_REG,pin,data);
 4d0:	58 b3       	in	r21, 0x18	; 24
 4d2:	21 e0       	ldi	r18, 0x01	; 1
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	06 2e       	mov	r0, r22
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_u8SetPinData+0x5e>
 4da:	22 0f       	add	r18, r18
 4dc:	33 1f       	adc	r19, r19
 4de:	0a 94       	dec	r0
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_u8SetPinData+0x5a>
 4e2:	84 2f       	mov	r24, r20
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_u8SetPinData+0x6c>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	6a 95       	dec	r22
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_u8SetPinData+0x68>
 4f0:	20 95       	com	r18
 4f2:	25 23       	and	r18, r21
 4f4:	82 2b       	or	r24, r18
 4f6:	88 bb       	out	0x18, r24	; 24
}

// function to assign value to pin
uint8_t DIO_u8SetPinData(uint8_t port, uint8_t pin, uint8_t data)
{
  uint8_t u8ErrorState = STD_TYPES_OK ;
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	08 95       	ret
			else
				u8ErrorState = SetPinData_Error ;	
			break;	
			
		case PORTC:
			if((data == LOW)||(data == HIGH))
 4fc:	42 30       	cpi	r20, 0x02	; 2
 4fe:	b0 f5       	brcc	.+108    	; 0x56c <DIO_u8SetPinData+0xec>
				ASSIGN_BIT(PORTC_REG,pin,data);
 500:	55 b3       	in	r21, 0x15	; 21
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	06 2e       	mov	r0, r22
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_u8SetPinData+0x8e>
 50a:	22 0f       	add	r18, r18
 50c:	33 1f       	adc	r19, r19
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_u8SetPinData+0x8a>
 512:	84 2f       	mov	r24, r20
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_u8SetPinData+0x9c>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_u8SetPinData+0x98>
 520:	20 95       	com	r18
 522:	25 23       	and	r18, r21
 524:	82 2b       	or	r24, r18
 526:	85 bb       	out	0x15, r24	; 21
}

// function to assign value to pin
uint8_t DIO_u8SetPinData(uint8_t port, uint8_t pin, uint8_t data)
{
  uint8_t u8ErrorState = STD_TYPES_OK ;
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	08 95       	ret
			else
				u8ErrorState = SetPinData_Error ;	
			break;	
			
		case PORTD:
			if((data == LOW)||(data == HIGH))
 52c:	42 30       	cpi	r20, 0x02	; 2
 52e:	00 f5       	brcc	.+64     	; 0x570 <DIO_u8SetPinData+0xf0>
				ASSIGN_BIT(PORTD_REG,pin,data);
 530:	52 b3       	in	r21, 0x12	; 18
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	06 2e       	mov	r0, r22
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_u8SetPinData+0xbe>
 53a:	22 0f       	add	r18, r18
 53c:	33 1f       	adc	r19, r19
 53e:	0a 94       	dec	r0
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_u8SetPinData+0xba>
 542:	84 2f       	mov	r24, r20
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	02 c0       	rjmp	.+4      	; 0x54c <DIO_u8SetPinData+0xcc>
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	6a 95       	dec	r22
 54e:	e2 f7       	brpl	.-8      	; 0x548 <DIO_u8SetPinData+0xc8>
 550:	20 95       	com	r18
 552:	25 23       	and	r18, r21
 554:	82 2b       	or	r24, r18
 556:	82 bb       	out	0x12, r24	; 18
}

// function to assign value to pin
uint8_t DIO_u8SetPinData(uint8_t port, uint8_t pin, uint8_t data)
{
  uint8_t u8ErrorState = STD_TYPES_OK ;
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	08 95       	ret
			u8ErrorState = SetPinData_Error ;
	}
  }
  else
  {
	  u8ErrorState = SetPinData_Error ;	
 55c:	84 e1       	ldi	r24, 0x14	; 20
 55e:	08 95       	ret
			else
				u8ErrorState = SetPinData_Error ;	
			break;
		
		default:
			u8ErrorState = SetPinData_Error ;
 560:	84 e1       	ldi	r24, 0x14	; 20
 562:	08 95       	ret
		case PORTA:
			if((data == LOW)||(data == HIGH))
				ASSIGN_BIT(PORTA_REG,pin,data);
				
			else
				u8ErrorState = SetPinData_Error ;	
 564:	84 e1       	ldi	r24, 0x14	; 20
 566:	08 95       	ret
		case PORTB:
			if((data == LOW)||(data == HIGH))
				ASSIGN_BIT(PORTB_REG,pin,data);
		
			else
				u8ErrorState = SetPinData_Error ;	
 568:	84 e1       	ldi	r24, 0x14	; 20
 56a:	08 95       	ret
		case PORTC:
			if((data == LOW)||(data == HIGH))
				ASSIGN_BIT(PORTC_REG,pin,data);
			
			else
				u8ErrorState = SetPinData_Error ;	
 56c:	84 e1       	ldi	r24, 0x14	; 20
 56e:	08 95       	ret
		case PORTD:
			if((data == LOW)||(data == HIGH))
				ASSIGN_BIT(PORTD_REG,pin,data);
		
			else
				u8ErrorState = SetPinData_Error ;	
 570:	84 e1       	ldi	r24, 0x14	; 20
  else
  {
	  u8ErrorState = SetPinData_Error ;	
  }
	return u8ErrorState ;
}
 572:	08 95       	ret

00000574 <TIMER0_u8Init>:
		TIMER0_u8Stop();
		delay_state = DELAY_AVAILABLE;
		u8ErrorState = STD_TYPES_OK ;
	}
	return u8ErrorState ;
}
 574:	83 b7       	in	r24, 0x33	; 51
 576:	8f 7b       	andi	r24, 0xBF	; 191
 578:	83 bf       	out	0x33, r24	; 51
 57a:	83 b7       	in	r24, 0x33	; 51
 57c:	88 60       	ori	r24, 0x08	; 8
 57e:	83 bf       	out	0x33, r24	; 51
 580:	8f b7       	in	r24, 0x3f	; 63
 582:	80 68       	ori	r24, 0x80	; 128
 584:	8f bf       	out	0x3f, r24	; 63
 586:	89 b7       	in	r24, 0x39	; 57
 588:	82 60       	ori	r24, 0x02	; 2
 58a:	89 bf       	out	0x39, r24	; 57
 58c:	03 b6       	in	r0, 0x33	; 51
 58e:	06 fc       	sbrc	r0, 6
 590:	0b c0       	rjmp	.+22     	; 0x5a8 <TIMER0_u8Init+0x34>
 592:	03 b6       	in	r0, 0x33	; 51
 594:	03 fe       	sbrs	r0, 3
 596:	0a c0       	rjmp	.+20     	; 0x5ac <TIMER0_u8Init+0x38>
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	07 fe       	sbrs	r0, 7
 59c:	09 c0       	rjmp	.+18     	; 0x5b0 <TIMER0_u8Init+0x3c>
 59e:	09 b6       	in	r0, 0x39	; 57
 5a0:	01 fc       	sbrc	r0, 1
 5a2:	08 c0       	rjmp	.+16     	; 0x5b4 <TIMER0_u8Init+0x40>
 5a4:	81 e4       	ldi	r24, 0x41	; 65
 5a6:	08 95       	ret
 5a8:	81 e4       	ldi	r24, 0x41	; 65
 5aa:	08 95       	ret
 5ac:	81 e4       	ldi	r24, 0x41	; 65
 5ae:	08 95       	ret
 5b0:	81 e4       	ldi	r24, 0x41	; 65
 5b2:	08 95       	ret
 5b4:	80 e0       	ldi	r24, 0x00	; 0
 5b6:	08 95       	ret

000005b8 <__vector_10>:

// ISR 
void __vector_10(void)
{
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	0f b6       	in	r0, 0x3f	; 63
 5be:	0f 92       	push	r0
 5c0:	11 24       	eor	r1, r1
 5c2:	2f 93       	push	r18
 5c4:	3f 93       	push	r19
 5c6:	4f 93       	push	r20
 5c8:	5f 93       	push	r21
 5ca:	6f 93       	push	r22
 5cc:	7f 93       	push	r23
 5ce:	8f 93       	push	r24
 5d0:	9f 93       	push	r25
 5d2:	af 93       	push	r26
 5d4:	bf 93       	push	r27
 5d6:	ef 93       	push	r30
 5d8:	ff 93       	push	r31
	counter++;            // increment counter to compare with delay 
 5da:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <counter>
 5de:	90 91 b8 00 	lds	r25, 0x00B8	; 0x8000b8 <counter+0x1>
 5e2:	01 96       	adiw	r24, 0x01	; 1
 5e4:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <counter+0x1>
 5e8:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <counter>
	if(counter == compare && delayCallBack != NULL)				// if delay finished and there function address to call  
 5ec:	20 91 b7 00 	lds	r18, 0x00B7	; 0x8000b7 <counter>
 5f0:	30 91 b8 00 	lds	r19, 0x00B8	; 0x8000b8 <counter+0x1>
 5f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <compare>
 5f8:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <compare+0x1>
 5fc:	28 17       	cp	r18, r24
 5fe:	39 07       	cpc	r19, r25
 600:	a1 f4       	brne	.+40     	; 0x62a <__vector_10+0x72>
 602:	80 91 b4 00 	lds	r24, 0x00B4	; 0x8000b4 <__data_end>
 606:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <__data_end+0x1>
 60a:	89 2b       	or	r24, r25
 60c:	71 f0       	breq	.+28     	; 0x62a <__vector_10+0x72>
	{
		counter = 0;
 60e:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <counter+0x1>
 612:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <counter>
		CLR_BIT(TIMSK_REG, OCIE0);							// reset interrupt 
 616:	89 b7       	in	r24, 0x39	; 57
 618:	8d 7f       	andi	r24, 0xFD	; 253
 61a:	89 bf       	out	0x39, r24	; 57
		delay_state = DELAY_AVAILABLE ;
 61c:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <delay_state>
		delayCallBack();									// call the function 
 620:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <__data_end>
 624:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <__data_end+0x1>
 628:	09 95       	icall
	}
 62a:	ff 91       	pop	r31
 62c:	ef 91       	pop	r30
 62e:	bf 91       	pop	r27
 630:	af 91       	pop	r26
 632:	9f 91       	pop	r25
 634:	8f 91       	pop	r24
 636:	7f 91       	pop	r23
 638:	6f 91       	pop	r22
 63a:	5f 91       	pop	r21
 63c:	4f 91       	pop	r20
 63e:	3f 91       	pop	r19
 640:	2f 91       	pop	r18
 642:	0f 90       	pop	r0
 644:	0f be       	out	0x3f, r0	; 63
 646:	0f 90       	pop	r0
 648:	1f 90       	pop	r1
 64a:	18 95       	reti

0000064c <UART_u8Init>:
 */
uint8_t UART_u8Init()
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	/*Receive enable config*/
	SET_BIT(UCSRB_REG,RXEN_BIT);
 64c:	8a b1       	in	r24, 0x0a	; 10
 64e:	80 61       	ori	r24, 0x10	; 16
 650:	8a b9       	out	0x0a, r24	; 10
	if ( GET_BIT(UCSRB_REG,RXEN_BIT) == 0 )	
 652:	54 9b       	sbis	0x0a, 4	; 10
 654:	02 c0       	rjmp	.+4      	; 0x65a <UART_u8Init+0xe>
 * Arguments   : void
 * return      : UART_Init_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8Init()
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	01 c0       	rjmp	.+2      	; 0x65c <UART_u8Init+0x10>
	/*Receive enable config*/
	SET_BIT(UCSRB_REG,RXEN_BIT);
	if ( GET_BIT(UCSRB_REG,RXEN_BIT) == 0 )	
		 u8ErrorState = UART_Init_Error ;
 65a:	81 e8       	ldi	r24, 0x81	; 129
		 
	/*Send enable config*/
	SET_BIT(UCSRB_REG,TXEN_BIT);
 65c:	9a b1       	in	r25, 0x0a	; 10
 65e:	98 60       	ori	r25, 0x08	; 8
 660:	9a b9       	out	0x0a, r25	; 10
	if ( GET_BIT(UCSRB_REG,TXEN_BIT) == 0 )
 662:	53 9b       	sbis	0x0a, 3	; 10
		u8ErrorState = UART_Init_Error ;
 664:	81 e8       	ldi	r24, 0x81	; 129
		 
	/*Load configuration values in UCSrC Register*/
	/*Set URSEL to access UCSRC Reg*/
	SET_BIT(UCSRC_REG,URSEL_BIT);
 666:	90 b5       	in	r25, 0x20	; 32
 668:	90 68       	ori	r25, 0x80	; 128
 66a:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,URSEL_BIT) == 0 )
 66c:	57 9b       	sbis	0x0a, 7	; 10
		u8ErrorState = UART_Init_Error ;
 66e:	81 e8       	ldi	r24, 0x81	; 129
		
	/*ASynchronization mode*/				  
	CLR_BIT(UCSRC_REG,UMSEL_BIT);
 670:	90 b5       	in	r25, 0x20	; 32
 672:	9f 7b       	andi	r25, 0xBF	; 191
 674:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,UMSEL_BIT) != 0 )
 676:	56 99       	sbic	0x0a, 6	; 10
		u8ErrorState = UART_Init_Error ;
 678:	81 e8       	ldi	r24, 0x81	; 129
		
	/*Parity Mode config*/
	UCSRC_REG|=(UART_PARITY<<4);
 67a:	90 b5       	in	r25, 0x20	; 32
 67c:	90 bd       	out	0x20, r25	; 32
		 
	/*Stop Bits config*/
	ASSIGN_BIT(UCSRC_REG,USBS_BIT,UART_STOP_BIT_NO);
 67e:	90 b5       	in	r25, 0x20	; 32
 680:	97 7f       	andi	r25, 0xF7	; 247
 682:	90 bd       	out	0x20, r25	; 32
		 
	/*Character size config*/
	if (UART_SYMPOL_SIZE != UART_9_BITS)
	{
		 /*config char size(5,6,7,8)*/
		 UCSRC_REG |= (UART_SYMPOL_SIZE<<1);
 684:	90 b5       	in	r25, 0x20	; 32
 686:	96 60       	ori	r25, 0x06	; 6
 688:	90 bd       	out	0x20, r25	; 32
	}
	/*end of char size check*/
			 
	/*Baud Rate Value Config*/
	// URSEL BIT must be 0 to can write on UBRR Register
	CLR_BIT(UCSRC_REG,URSEL_BIT);
 68a:	90 b5       	in	r25, 0x20	; 32
 68c:	9f 77       	andi	r25, 0x7F	; 127
 68e:	90 bd       	out	0x20, r25	; 32
	if ( GET_BIT(UCSRB_REG,URSEL_BIT) != 0 )
 690:	57 99       	sbic	0x0a, 7	; 10
		u8ErrorState = UART_Init_Error ;
 692:	81 e8       	ldi	r24, 0x81	; 129
	// set the  baud rate 	
	UBRRH_REG = 0 ;
 694:	10 bc       	out	0x20, r1	; 32
	UBRRL_REG = UART_BAUDRATE;
 696:	93 e3       	ldi	r25, 0x33	; 51
 698:	99 b9       	out	0x09, r25	; 9
	
	return u8ErrorState ;
}
 69a:	08 95       	ret

0000069c <UART_u8SendByte>:
 */
uint8_t UART_u8SendByte(uint8_t data)
{
	uint8_t u8ErrorState ;
	/*wait while previous sending is complete*/
	while ( (GET_BIT(UCSRA_REG,UDRE_BIT)) == 0 );
 69c:	5d 9b       	sbis	0x0b, 5	; 11
 69e:	fe cf       	rjmp	.-4      	; 0x69c <UART_u8SendByte>
	/*send byte*/
	UDR_REG = data ;
 6a0:	8c b9       	out	0x0c, r24	; 12
	if ( UDR_REG != data )
 6a2:	8c b1       	in	r24, 0x0c	; 12
		u8ErrorState = UART_SendByte_Error ;
	return u8ErrorState ;
}
 6a4:	82 e8       	ldi	r24, 0x82	; 130
 6a6:	08 95       	ret

000006a8 <UART_u8ReceiveByte>:
 */
uint8_t UART_u8ReceiveByte(uint8_t * data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// pointer passed to function not equal NULL
	if ( data == NULL )
 6a8:	00 97       	sbiw	r24, 0x00	; 0
 6aa:	39 f0       	breq	.+14     	; 0x6ba <UART_u8ReceiveByte+0x12>
		u8ErrorState = UART_ReceiveByte_Error ;
	else
	{
		/*wait while previous transition is complete*/
		while ( (GET_BIT(UCSRA_REG,RXC_BIT)) == 0 );
 6ac:	5f 9b       	sbis	0x0b, 7	; 11
 6ae:	fe cf       	rjmp	.-4      	; 0x6ac <UART_u8ReceiveByte+0x4>
		/*send byte*/
		*data = UDR_REG  ;
 6b0:	2c b1       	in	r18, 0x0c	; 12
 6b2:	fc 01       	movw	r30, r24
 6b4:	20 83       	st	Z, r18
 * Arguments   : pointer to Char to save the received char 
 * return      : UART_ReceiveByte_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8ReceiveByte(uint8_t * data)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	08 95       	ret
	// pointer passed to function not equal NULL
	if ( data == NULL )
		u8ErrorState = UART_ReceiveByte_Error ;
 6ba:	83 e8       	ldi	r24, 0x83	; 131
		while ( (GET_BIT(UCSRA_REG,RXC_BIT)) == 0 );
		/*send byte*/
		*data = UDR_REG  ;
	}
	return u8ErrorState ;
}
 6bc:	08 95       	ret

000006be <UART_u8SendString>:
 * Description : Receive character by UART Communication 
 * Arguments   : pointer to string you want to send it 
 * return      : UART_SendString_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8SendString(uint8_t *str)
{
 6be:	1f 93       	push	r17
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	ec 01       	movw	r28, r24
	uint8_t u8ErrorState = STD_TYPES_OK ;
 6c6:	10 e0       	ldi	r17, 0x00	; 0
	// send characters until find the NULL
	while(*str != '\0')
 6c8:	05 c0       	rjmp	.+10     	; 0x6d4 <UART_u8SendString+0x16>
	{
		// send character by charcter
		if ( UART_u8SendByte(*str) != STD_TYPES_OK )
 6ca:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_u8SendByte>
 6ce:	81 11       	cpse	r24, r1
			u8ErrorState = UART_SendString_Error ;
 6d0:	14 e8       	ldi	r17, 0x84	; 132
		str++;
 6d2:	21 96       	adiw	r28, 0x01	; 1
 */
uint8_t UART_u8SendString(uint8_t *str)
{
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// send characters until find the NULL
	while(*str != '\0')
 6d4:	88 81       	ld	r24, Y
 6d6:	81 11       	cpse	r24, r1
 6d8:	f8 cf       	rjmp	.-16     	; 0x6ca <UART_u8SendString+0xc>
		if ( UART_u8SendByte(*str) != STD_TYPES_OK )
			u8ErrorState = UART_SendString_Error ;
		str++;
	}
	return u8ErrorState ;
}
 6da:	81 2f       	mov	r24, r17
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	1f 91       	pop	r17
 6e2:	08 95       	ret

000006e4 <UART_u8ReceiveString>:
 * Description : Receive character by UART Communication 
 * Arguments   : pointer to string to save string in it  
 * return      : UART_ReceiveString_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8ReceiveString(uint8_t *str)
{
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	8c 01       	movw	r16, r24
	uint8_t index = 0 ;
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// receive the first byte 
	if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
 6ee:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_u8ReceiveByte>
 6f2:	81 11       	cpse	r24, r1
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <UART_u8ReceiveString+0x16>
 * return      : UART_ReceiveString_Error or STD_TYPES_OK in uint8_t    
 */
uint8_t UART_u8ReceiveString(uint8_t *str)
{
	uint8_t index = 0 ;
	uint8_t u8ErrorState = STD_TYPES_OK ;
 6f6:	d0 e0       	ldi	r29, 0x00	; 0
 6f8:	01 c0       	rjmp	.+2      	; 0x6fc <UART_u8ReceiveString+0x18>
	// receive the first byte 
	if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
		u8ErrorState = UART_ReceiveString_Error ;
 6fa:	d5 e8       	ldi	r29, 0x85	; 133
	// receive byte by byte until find CR
	while(str[index] != 0x0D )						// enter terminator for terminal = 0x0D ( Carriage return )
	{
		index++;
		if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
			u8ErrorState = UART_ReceiveString_Error ;
 6fc:	c0 e0       	ldi	r28, 0x00	; 0
 6fe:	08 c0       	rjmp	.+16     	; 0x710 <UART_u8ReceiveString+0x2c>
	if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
		u8ErrorState = UART_ReceiveString_Error ;
	// receive byte by byte until find CR
	while(str[index] != 0x0D )						// enter terminator for terminal = 0x0D ( Carriage return )
	{
		index++;
 700:	cf 5f       	subi	r28, 0xFF	; 255
		if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
 702:	c8 01       	movw	r24, r16
 704:	8c 0f       	add	r24, r28
 706:	91 1d       	adc	r25, r1
 708:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_u8ReceiveByte>
 70c:	81 11       	cpse	r24, r1
			u8ErrorState = UART_ReceiveString_Error ;
 70e:	d5 e8       	ldi	r29, 0x85	; 133
	uint8_t u8ErrorState = STD_TYPES_OK ;
	// receive the first byte 
	if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
		u8ErrorState = UART_ReceiveString_Error ;
	// receive byte by byte until find CR
	while(str[index] != 0x0D )						// enter terminator for terminal = 0x0D ( Carriage return )
 710:	f8 01       	movw	r30, r16
 712:	ec 0f       	add	r30, r28
 714:	f1 1d       	adc	r31, r1
 716:	80 81       	ld	r24, Z
 718:	8d 30       	cpi	r24, 0x0D	; 13
 71a:	91 f7       	brne	.-28     	; 0x700 <UART_u8ReceiveString+0x1c>
	{
		index++;
		if ( UART_u8ReceiveByte(&str[index]) != STD_TYPES_OK )
			u8ErrorState = UART_ReceiveString_Error ;
	}
	str[index] = '\0';
 71c:	10 82       	st	Z, r1
	return u8ErrorState ;
 71e:	8d 2f       	mov	r24, r29
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	0f 91       	pop	r16
 728:	08 95       	ret

0000072a <_exit>:
 72a:	f8 94       	cli

0000072c <__stop_program>:
 72c:	ff cf       	rjmp	.-2      	; 0x72c <__stop_program>
